#pragma once
#include<stdio.h>
#include<time.h>
#include<string.h>
#include <stdlib.h>
enum week { Mon = 1, Tue, Wed, Thu, Fri, Sat, Sun };
struct Patient
{
	char P_Name[20];
	int P_Age;
	int P_Number[9];
	int P_ID;
	struct Patient* P_nextp;
};
struct Doctor
{
	char D_Name[20];
	char D_Level[30];
	char D_Dep[50];
	int D_Number[5];
	enum week D_Day;
	struct Doctor* D_nextp;
};
struct Time {
	int Month;
	int Day;
	int Hour;
	int Minute;
};
struct Record {
	struct Patient Patient;
	struct Doctor doctor;
	struct Time time;
	char Check[20];
	char Medicine[40];
	int Hospital[9];
	struct Record* rnextp;
};
int date[4];//日期
int cashplage;//住院押金
int hosturnover = 0;//营业额度
struct hospitalimformation {

	char name[20];
	int id;
	int indate[4];
	int outdate[4];
	int datelong;
	int cashplage;
	struct hospitalimformation* next;
};//住院信息
struct hospitalimformation hospitalhead;
struct hospitalimformation hospitaltail;//住院信息的表头和表尾
struct hospitalimformation outhospitalhead;
struct hospitalimformation outhospitaltail;//出院信息的表头和表尾	
void Checkcashplage(struct hospitalimformation* p) {
	struct tm* local;
	time_t t;
	t = time(NULL);
	local = localtime(&t);
	if (local->tm_hour > 8)
	{
		p->cashplage -= 200;
	}
	if (p->cashplage <= 1000)
		printf("您的余额已经低于1000元请及时充值");
}//检查押金
void Incashplage(struct hospitalimformation* a, int b) {
	a->cashplage += b;
}//充值押金
int Date(int* p) {
	int days = 0;
	days += *(p + 1);
	switch (*p) {
	case 1:days += 0; break;
	case 2:days += 31; break;
	case 3:days += 60; break;
	case 4:days += 91; break;
	case 5:days += 121; break;
	case 6:days += 152; break;
	case 7:days += 182; break;
	case 8:days += 213; break;
	case 9:days += 244; break;
	case 10:days += 274; break;
	case 11:days += 305; break;
	case 12:days += 335; break;
	}
	if (*(p + 2) >= 8)
		days += 1;
	return days;
}//计算天数
int Caculate(int* a, int* b) {
	int sum = 0;
	sum = 200 * (Date(a) - Date(b));
	if (*(b + 2) >= 8)
		sum += 200;
	return sum;
}//计算住院费a>b
void Timecheck(int* p) {
	if (*(p + 2) > 0 && *(p + 2) < 25 && *(p + 3) > 0 && *(p + 3) < 61) {
		if (*p == 1 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		if (*p == 2 && *(p + 1) > 0 && *(p + 1) < 29)
			return;
		if (*p == 3 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		if (*p == 4 && *(p + 1) > 0 && *(p + 1) < 30)
			return;
		if (*p == 5 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		if (*p == 6 && *(p + 1) > 0 && *(p + 1) < 30)
			return;
		if (*p == 7 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		if (*p == 8 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		if (*p == 9 && *(p + 1) > 0 && *(p + 1) < 30)
			return;
		if (*p == 10 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		if (*p == 11 && *(p + 1) > 0 && *(p + 1) < 30)
			return;
		if (*p == 12 && *(p + 1) > 0 && *(p + 1) < 31)
			return;
		printf("输入的时间有误");
		exit(0);
	}
	else {
		printf("输入的时间有误");
		exit(0);
	}
}
int Comparedate(int* a, int* b) {
	int mon = *b - *a;
	int day = *(b + 1) - *(a + 1);
	int hour = *(b + 2) - *(a + 2);
	int min = *(b + 3) - *(a + 3);
	if (mon > 0)
		return 1;
	else
	{
		if (mon == 0 && day > 0)
			return 1;
		else
		{
			if (mon == 0 && day == 0 && hour > 0)
				return 1;
			else
			{
				if (mon == 0 && day == 0 && hour == 0 && min > 0)
					return 1;
				else
					return 0;
			}
		}
	}
	return 1;
}//b比a大返回1，小返回0,默认返回1
void Inhospital() {
	struct hospitalimformation* hos = (struct hospitalimformation*)malloc(sizeof(struct hospitalimformation));
	struct hospitalimformation* p = &hospitalhead;
	int date1[4] = { -1 };
	int date2[4] = { -1 };
	if (hospitalhead.next == &hospitaltail)
	{
		hospitalhead.next = hos;
		hos->next = &hospitaltail;

	}
	else {
		while (p->next != &hospitaltail) {
			p = p->next;
		};
	}
	p->next = hos;
	hos->next = &hospitaltail;
	printf("请输入姓名：");
	scanf("%s", hos->name);//得到姓名
	printf("请输入身份号: ");
	scanf("%d", &hos->id);
	printf("请输入住院日期：");//得到身份号
	scanf("%d %d %d %d", date1, date1 + 1, date1 + 2, date1 + 3);
	Timecheck(date1);
	for (int i = 0; i < 4; i++) {
		hos->indate[i] = date1[i];
	};//得到住院日期
	printf("请输入出院日期:");
	scanf("%d %d %d %d", date2, date2 + 1, date2 + 2, date2 + 3);
	Timecheck(date2);
	for (int i = 0; i < 4; i++) {
		hos->outdate[i] = date2[i];
	};//得到出院日期
	if (Comparedate(date1, date2) == 1)
	{
		hos->cashplage = Caculate(date2, date1);
		if (hos->cashplage >= 1000)
			printf("请提交住院押金:（不小于%d，且为100的整数倍）", hos->cashplage);
		else
			printf("请提交住院押金:（不小于1000，且为100的整数倍）");
		scanf("%d", &(hos->cashplage));//得到住院押金
	}
	else
	{
		printf("输入的时间有误");
	}
}//住院流程
void Outhospital(struct hospitalimformation* p) {
	struct hospitalimformation* q = &hospitalhead;
	struct hospitalimformation* m = &outhospitalhead;
	int a[4];
	int sum;
	struct tm* local;
	time_t t;
	t = time(NULL);
	local = localtime(&t);
	a[0] = local->tm_mon;
	a[1] = local->tm_mday;
	a[2] = local->tm_hour;
	a[3] = local->tm_min;
	sum = 200 * (Date(a) - Date(p->indate));
	hosturnover += sum;//在营业额里加入扣除的押金
	printf("住院押金还剩余%d", p->cashplage - sum);
	for (int i = 0; i < 4; i++)
		p->outdate[i] = a[i];//将预计出院日期改成实际的出院日期
	while (q->next != p) {
		q = q->next;
	}//定位p
	q->next = p->next;//删除
	if (outhospitalhead.next == &outhospitaltail)
	{
		outhospitalhead.next = p;
		p->next = &outhospitaltail;

	}//若出院名单里没有信息则直接添加
	else {
		while (m->next != &outhospitaltail) {
			m = m->next;
		};
	}//若有信息则先定位
	m->next = p;
	p->next = &outhospitaltail;//将出院的信息导入到出院链表里
	printf("手续办理完成");
}//出院手续
void Generaterecord(struct Record* rp, struct hospitalimformation* hp) {
	for (int i = 0; i < 4; i++) {
		rp->Hospital[i] = hp->indate[i];
	}//前四个入住日期
	for (int i = 0; i < 4; i++) {
		rp->Hospital[i + 4] = hp->outdate[i];
	}//后四个出院日期
	rp->Hospital[8] = hp->cashplage;//第九个为住院押金
}//生成诊疗记录中的住院信息
void Reportall() {
	if (hospitalhead.next == &hospitaltail)
		printf("当前没有住院信息");
	else {
		struct hospitalimformation* p = &hospitalhead;
		do {
			p = p->next;
			printf("患者姓名：%s\n", p->name);
			printf("入院日期：%d月%d日%d时%d分\n", p->indate[0], p->indate[1], p->indate[2], p->indate[3]);
			printf("预计出院日期：%d月%d日%d时%d分\n", p->outdate[0], p->outdate[1], p->outdate[2], p->outdate[3]);
			printf("住院押金：%d\n", p->cashplage);
		} while (p->next != &hospitaltail);
	}
}//打印当前时间的住院患者报表
void Report(struct hospitalimformation* p) {
	printf("患者姓名：%s\n", p->name);
	printf("入院日期：%d月%d日%d时%d分\n", p->indate[0], p->indate[1], p->indate[2], p->indate[3]);
	printf("预计出院日期：%d月%d日%d时%d分\n", p->outdate[0], p->outdate[1], p->outdate[2], p->outdate[3]);
	printf("住院押金：%d", p->cashplage);
}
void Gethospitalimformationfromlist() {
}//从链表中得到信息导入文件
void Outhospitalimformationtolist() {
}//将文件的信息导入链表
void Deletehospitalimformation() {
	struct hospitalimformation* p = hospitalhead.next;
	int a;
	printf("请输入您的身份号：");
	scanf("%d", &a);
	while (p != &hospitaltail) {
		if (p->next->id == a) {
			break;
		}
		else
		{
			p = p->next;
		}
	}
	if (p == &hospitaltail) {
		printf("信息不存在");
	}
	else
	{
		p->next = p->next->next;
	}

}//删除信息
void Changehospitalimformation() {
	struct hospitalimformation* p = &hospitalhead;
	struct hospitalimformation* hos = (struct hospitalimformation*)malloc(sizeof(struct hospitalimformation));
	int date1[4] = { -1 };
	int date2[4] = { -1 };
	int a;
	printf("请输入您的身份号：");
	scanf("%d", &a);
	while (p != &hospitaltail) {
		if (p->next->id == a) {
			break;
		}
		else
		{
			p = p->next;
		}
	}
	if (p == &hospitaltail) {
		printf("信息不存在");
	}
	else
	{
		printf("查询的信息存在，请修改\n");
		printf("请输入姓名：");
		scanf("%s", hos->name);//得到姓名
		printf("请输入身份号: ");
		scanf("%d", &hos->id);
		printf("请输入住院日期：");//得到身份号
		scanf("%d %d %d %d", date1, date1 + 1, date1 + 2, date1 + 3);
		Timecheck(date1);
		for (int i = 0; i < 4; i++) {
			hos->indate[i] = date[i];
		};//得到住院日期
		printf("请输入出院日期:");
		scanf("%d %d %d %d", date2, date2 + 1, date2 + 2, date2 + 3);
		Timecheck(date2);
		for (int i = 0; i < 4; i++) {
			hos->outdate[i] = date[i];
		};//得到出院日期
		printf("请输入押金:");
		scanf("%d", &hos->cashplage);//得到住院押金
		hos->next = p->next->next;
		free(p->next);
		p->next = hos;//将新数据加入到链表里
	}
}//修改信息
void Searchhospitalimformation() {
	struct hospitalimformation* p = &hospitalhead;
	int a;
	printf("请输入您的身份号：");
	scanf("%d", &a);
	while (p != &hospitaltail) {
		if (p->next->id == a) {
			break;
		}
		else
		{
			p = p->next;
		}
	}
	if (p->next->id == a) {
		printf("您查询的信息存在");
		Report(p->next);
	}
	else
		printf("信息不存在");
}//搜索一条信息
int Turnover() {
	struct hospitalimformation* p = &hospitalhead;
	struct hospitalimformation* q = &outhospitalhead;
	struct tm* local;
	time_t t;
	t = time(NULL);
	local = localtime(&t);
	int a[4];
	a[0] = local->tm_mon + 1;
	a[1] = local->tm_mday;
	a[2] = local->tm_hour;
	a[3] = local->tm_min;
	printf("%d月", *a);
	printf("%d日", *(a + 1));
	printf("%d时", *(a + 2));
	printf("%d分", *(a + 3));
	int sum = 0;
	while (p->next != &hospitaltail) {
		p = p->next;
		sum += Caculate(a, p->indate);
		printf("%d\n", sum);
	}//计算目前还在住院的人的住院费
	while (q->next != &outhospitaltail) {
		sum += Caculate(q->outdate, q->indate);
	}//计算在出院人员里的住院费
	return sum;
}//计算住院营业额
